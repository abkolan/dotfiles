name: Smoke Test

on:
  push:
    branches: [ test-actions, smoke-test ]
  workflow_dispatch:

env:
  FORCE_COLOR: 1

jobs:
  smoke-test:
    name: Smoke Test - Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate repository structure
        run: |
          echo "🔍 Validating dotfiles repository structure..."
          
          # Essential directories
          required_dirs=("zsh" "nvim" "git" "tests")
          for dir in "${required_dirs[@]}"; do
            if [[ -d "$dir" ]]; then
              echo "✅ $dir/"
            else
              echo "❌ Missing: $dir/"
              exit 1
            fi
          done
          
          # Essential files
          required_files=("README.md" "setup.sh" ".gitignore")
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done
      
      - name: Validate test infrastructure
        run: |
          echo "🧪 Validating test infrastructure..."
          
          # Check test scripts exist and are executable
          test_scripts=("tests/test-all.sh" "tests/test-fast.sh" "tests/run-tests.sh")
          for script in "${test_scripts[@]}"; do
            if [[ -f "$script" ]]; then
              echo "✅ Found: $script"
              chmod +x "$script"
              
              # Syntax check
              if bash -n "$script"; then
                echo "✅ Syntax valid: $script"
              else
                echo "❌ Syntax error: $script"
                exit 1
              fi
            else
              echo "❌ Missing: $script"
              exit 1
            fi
          done
      
      - name: Validate Docker files
        run: |
          echo "🐳 Validating Docker test infrastructure..."
          
          docker_files=("tests/Dockerfile.base" "tests/Dockerfile.fast")
          for dockerfile in "${docker_files[@]}"; do
            if [[ -f "$dockerfile" ]]; then
              echo "✅ Found: $dockerfile"
              
              # Basic Dockerfile syntax check
              if grep -q "^FROM" "$dockerfile"; then
                echo "✅ Valid Dockerfile: $dockerfile"
              else
                echo "❌ Invalid Dockerfile: $dockerfile"
                exit 1
              fi
            else
              echo "❌ Missing: $dockerfile"
              exit 1
            fi
          done
      
      - name: Quick security scan
        run: |
          echo "🔒 Quick security scan..."
          
          # Check for obvious security issues
          if grep -r "password\|token\|secret" --include="*.sh" --include="*.zsh" . | grep -v "^[[:space:]]*#"; then
            echo "⚠️ Potential secrets found in files"
            exit 1
          else
            echo "✅ No obvious secrets found"
          fi
          
          # Check for hardcoded paths
          if grep -r "/Users/[^/]*" --include="*.sh" --include="*.zsh" .; then
            echo "⚠️ Hardcoded user paths found"
            exit 1
          else
            echo "✅ No hardcoded paths found"
          fi
      
      - name: Validate configuration files
        run: |
          echo "⚙️ Validating configuration files..."
          
          # Check ZSH configs
          if [[ -f "zsh/.zshrc" ]]; then
            echo "✅ ZSH config found"
            if zsh -n "zsh/.zshrc" 2>/dev/null; then
              echo "✅ ZSH config syntax valid"
            else
              echo "❌ ZSH config syntax error"
              exit 1
            fi
          fi
          
          # Check if essential tools are configured
          essential_configs=("git/.gitconfig" "nvim/.config/nvim/init.lua")
          for config in "${essential_configs[@]}"; do
            if [[ -f "$config" ]]; then
              echo "✅ Found: $config"
            else
              echo "⚠️ Optional config missing: $config"
            fi
          done
      
      - name: Test README instructions
        run: |
          echo "📖 Validating README instructions..."
          
          # Check if README has basic sections
          if grep -q "Quick Start\|Installation\|Usage" "README.md"; then
            echo "✅ README has installation instructions"
          else
            echo "❌ README missing installation instructions"
            exit 1
          fi
          
          # Check if test instructions are present
          if grep -q "test" "README.md"; then
            echo "✅ README mentions testing"
          else
            echo "⚠️ README should mention how to run tests"
          fi
      
      - name: Generate smoke test summary
        if: always()
        run: |
          echo "# 💨 Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ Validated Components" >> $GITHUB_STEP_SUMMARY
          echo "- Repository structure (directories & files)" >> $GITHUB_STEP_SUMMARY
          echo "- Test infrastructure (test-all.sh, test-fast.sh)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker test setup (Dockerfiles)" >> $GITHUB_STEP_SUMMARY
          echo "- Security (no secrets or hardcoded paths)" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration files (syntax validation)" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation (README completeness)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "This smoke test validates basic repository health." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**For functional testing:**" >> $GITHUB_STEP_SUMMARY
          echo "- Quick: \`./tests/test-fast.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "- Complete: \`./tests/test-all.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**For development:**" >> $GITHUB_STEP_SUMMARY
          echo "- Component tests: \`./tests/run-tests.sh <component>\`" >> $GITHUB_STEP_SUMMARY
          echo "- See [test documentation](./tests/README.md) for details" >> $GITHUB_STEP_SUMMARY