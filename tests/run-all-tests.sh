#!/usr/bin/env bash
# DEPRECATED: Use test-all.sh for comprehensive Docker testing
# This script is kept for backward compatibility but delegates to test-all.sh

set -e

# ===========================
# Configuration
# ===========================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPORT_DIR="$HOME/.dotfiles-test-reports"
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
REPORT_FILE="$REPORT_DIR/test_report_${TIMESTAMP}.md"
JUNIT_FILE="$REPORT_DIR/junit_${TIMESTAMP}.xml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Test suite configuration
declare -A TEST_SUITES=(
    ["basic"]="Basic installation and configuration tests"
    ["functional"]="Functional command and alias tests"
    ["negative"]="Error handling and recovery tests"
    ["workflows"]="Real-world developer workflow tests"
    ["performance"]="Performance benchmarks and regression tests"
    ["coverage"]="Test coverage analysis"
)

# Flags
RUN_BASIC=1
RUN_FUNCTIONAL=1
RUN_NEGATIVE=1
RUN_WORKFLOWS=1
RUN_PERFORMANCE=1
RUN_COVERAGE=1
VERBOSE=0
FAIL_FAST=0
GENERATE_REPORT=1

# ===========================
# Helper Functions
# ===========================
print_header() {
    echo ""
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${BLUE}════════════════════════════════════════════════════════════════${NC}"
}

print_step() {
    echo -e "${CYAN}▶ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${MAGENTA}ℹ️  $1${NC}"
}

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Run comprehensive test suite for dotfiles

OPTIONS:
    -h, --help              Show this help message
    -v, --verbose           Enable verbose output
    -f, --fail-fast         Stop on first test failure
    --only TYPE             Run only specific test type (basic|functional|negative|workflows|performance|coverage)
    --skip TYPE             Skip specific test type
    --no-report             Don't generate test report
    --docker                Run tests in Docker container
    --parallel              Run test suites in parallel (experimental)

EXAMPLES:
    $0                      # Run all tests
    $0 --only functional    # Run only functional tests
    $0 --skip performance   # Run all except performance tests
    $0 --docker            # Run all tests in Docker
    $0 -v --fail-fast      # Verbose output, stop on first failure

EOF
    exit 0
}

init_report_dir() {
    mkdir -p "$REPORT_DIR"
    
    # Start markdown report
    cat > "$REPORT_FILE" << EOF
# Dotfiles Test Report
**Generated:** $(date '+%Y-%m-%d %H:%M:%S')  
**System:** $(uname -a)  
**Git Commit:** $(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

## Executive Summary

EOF
    
    # Start JUnit XML
    cat > "$JUNIT_FILE" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Dotfiles Test Suite" time="0" tests="0" failures="0" errors="0">
EOF
}

close_reports() {
    echo "</testsuites>" >> "$JUNIT_FILE"
    
    # Add footer to markdown
    cat >> "$REPORT_FILE" << EOF

---
*Report generated by dotfiles test suite v1.0*
EOF
}

run_test_suite() {
    local suite_name="$1"
    local suite_desc="$2"
    local start_time=$(date +%s)
    
    print_step "Running $suite_desc..."
    
    case "$suite_name" in
        basic)
            if [[ -f "$SCRIPT_DIR/run-tests.sh" ]]; then
                "$SCRIPT_DIR/run-tests.sh" all
                return $?
            fi
            ;;
        functional)
            if [[ -f "$SCRIPT_DIR/functional/test-commands.sh" ]]; then
                "$SCRIPT_DIR/functional/test-commands.sh"
                return $?
            fi
            ;;
        negative)
            if [[ -f "$SCRIPT_DIR/negative/test-error-handling.sh" ]]; then
                "$SCRIPT_DIR/negative/test-error-handling.sh"
                return $?
            fi
            ;;
        workflows)
            if [[ -f "$SCRIPT_DIR/workflows/test-developer-workflows.sh" ]]; then
                "$SCRIPT_DIR/workflows/test-developer-workflows.sh"
                return $?
            fi
            ;;
        performance)
            if [[ -f "$SCRIPT_DIR/performance/benchmark.sh" ]]; then
                "$SCRIPT_DIR/performance/benchmark.sh"
                return $?
            fi
            ;;
        coverage)
            if [[ -f "$SCRIPT_DIR/coverage/coverage.sh" ]]; then
                "$SCRIPT_DIR/coverage/coverage.sh"
                return $?
            fi
            ;;
        *)
            print_warning "Unknown test suite: $suite_name"
            return 1
            ;;
    esac
    
    return 1
}

# ===========================
# Parse Arguments
# ===========================
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -v|--verbose)
            VERBOSE=1
            export VERBOSE
            shift
            ;;
        -f|--fail-fast)
            FAIL_FAST=1
            shift
            ;;
        --only)
            # Disable all, then enable specific
            RUN_BASIC=0
            RUN_FUNCTIONAL=0
            RUN_NEGATIVE=0
            RUN_WORKFLOWS=0
            RUN_PERFORMANCE=0
            RUN_COVERAGE=0
            
            case "$2" in
                basic) RUN_BASIC=1 ;;
                functional) RUN_FUNCTIONAL=1 ;;
                negative) RUN_NEGATIVE=1 ;;
                workflows) RUN_WORKFLOWS=1 ;;
                performance) RUN_PERFORMANCE=1 ;;
                coverage) RUN_COVERAGE=1 ;;
                *) print_error "Unknown test type: $2"; exit 1 ;;
            esac
            shift 2
            ;;
        --skip)
            case "$2" in
                basic) RUN_BASIC=0 ;;
                functional) RUN_FUNCTIONAL=0 ;;
                negative) RUN_NEGATIVE=0 ;;
                workflows) RUN_WORKFLOWS=0 ;;
                performance) RUN_PERFORMANCE=0 ;;
                coverage) RUN_COVERAGE=0 ;;
                *) print_error "Unknown test type: $2"; exit 1 ;;
            esac
            shift 2
            ;;
        --no-report)
            GENERATE_REPORT=0
            shift
            ;;
        --docker)
            # Delegate to new comprehensive test
            exec "$SCRIPT_DIR/test-all.sh" "$@"
            ;;
        --parallel)
            print_warning "Parallel execution is experimental"
            PARALLEL=1
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            ;;
    esac
done

# ===========================
# Main Execution
# ===========================
clear

cat << 'ASCII'
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║     🧪 DOTFILES COMPREHENSIVE TEST SUITE                     ║
║         Professional-Grade Testing Framework                 ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
ASCII

echo ""
print_warning "NOTICE: This script is deprecated. Use test-all.sh for comprehensive testing."
print_info "Continuing with legacy test runner..."
print_info "Report will be saved to: $REPORT_DIR"
echo ""

# Initialize reporting
if [[ $GENERATE_REPORT -eq 1 ]]; then
    init_report_dir
fi

# Track overall results
TOTAL_SUITES=0
PASSED_SUITES=0
FAILED_SUITES=0
SKIPPED_SUITES=0
START_TIME=$(date +%s)

# Summary for report
declare -A SUITE_RESULTS
declare -A SUITE_TIMES

# ===========================
# Run Test Suites
# ===========================
print_header "Test Execution"

# Basic Tests
if [[ $RUN_BASIC -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    print_step "Running Basic Tests..."
    if run_test_suite "basic" "Basic installation and configuration tests"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["basic"]="PASSED"
        print_success "Basic tests passed"
    else
        ((FAILED_SUITES++))
        SUITE_RESULTS["basic"]="FAILED"
        print_error "Basic tests failed"
        [[ $FAIL_FAST -eq 1 ]] && exit 1
    fi
    
    SUITE_TIMES["basic"]=$(($(date +%s) - suite_start))
fi

# Functional Tests
if [[ $RUN_FUNCTIONAL -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    echo ""
    print_step "Running Functional Tests..."
    if run_test_suite "functional" "Functional command and alias tests"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["functional"]="PASSED"
        print_success "Functional tests passed"
    else
        ((FAILED_SUITES++))
        SUITE_RESULTS["functional"]="FAILED"
        print_error "Functional tests failed"
        [[ $FAIL_FAST -eq 1 ]] && exit 1
    fi
    
    SUITE_TIMES["functional"]=$(($(date +%s) - suite_start))
fi

# Negative Tests
if [[ $RUN_NEGATIVE -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    echo ""
    print_step "Running Negative Tests..."
    if run_test_suite "negative" "Error handling and recovery tests"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["negative"]="PASSED"
        print_success "Negative tests passed"
    else
        ((FAILED_SUITES++))
        SUITE_RESULTS["negative"]="FAILED"
        print_error "Negative tests failed"
        [[ $FAIL_FAST -eq 1 ]] && exit 1
    fi
    
    SUITE_TIMES["negative"]=$(($(date +%s) - suite_start))
fi

# Workflow Tests
if [[ $RUN_WORKFLOWS -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    echo ""
    print_step "Running Workflow Tests..."
    if run_test_suite "workflows" "Real-world developer workflow tests"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["workflows"]="PASSED"
        print_success "Workflow tests passed"
    else
        ((FAILED_SUITES++))
        SUITE_RESULTS["workflows"]="FAILED"
        print_error "Workflow tests failed"
        [[ $FAIL_FAST -eq 1 ]] && exit 1
    fi
    
    SUITE_TIMES["workflows"]=$(($(date +%s) - suite_start))
fi

# Performance Tests
if [[ $RUN_PERFORMANCE -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    echo ""
    print_step "Running Performance Tests..."
    if run_test_suite "performance" "Performance benchmarks and regression tests"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["performance"]="PASSED"
        print_success "Performance tests passed"
    else
        ((FAILED_SUITES++))
        SUITE_RESULTS["performance"]="FAILED"
        print_warning "Performance tests failed (non-critical)"
        # Don't fail fast on performance
    fi
    
    SUITE_TIMES["performance"]=$(($(date +%s) - suite_start))
fi

# Coverage Analysis
if [[ $RUN_COVERAGE -eq 1 ]]; then
    ((TOTAL_SUITES++))
    suite_start=$(date +%s)
    
    echo ""
    print_step "Running Coverage Analysis..."
    if run_test_suite "coverage" "Test coverage analysis"; then
        ((PASSED_SUITES++))
        SUITE_RESULTS["coverage"]="ANALYZED"
        print_success "Coverage analysis complete"
    else
        SUITE_RESULTS["coverage"]="ERROR"
        print_warning "Coverage analysis failed"
    fi
    
    SUITE_TIMES["coverage"]=$(($(date +%s) - suite_start))
fi

# ===========================
# Generate Final Report
# ===========================
END_TIME=$(date +%s)
TOTAL_TIME=$((END_TIME - START_TIME))

print_header "Test Summary"

echo ""
echo "  Test Suites Run: $TOTAL_SUITES"
echo -e "  Passed: ${GREEN}$PASSED_SUITES${NC}"
echo -e "  Failed: ${RED}$FAILED_SUITES${NC}"
echo -e "  Skipped: ${YELLOW}$SKIPPED_SUITES${NC}"
echo ""
echo "  Total Time: ${TOTAL_TIME}s"
echo ""

# Suite-by-suite results
echo "  Results by Suite:"
for suite in basic functional negative workflows performance coverage; do
    if [[ -n "${SUITE_RESULTS[$suite]}" ]]; then
        result="${SUITE_RESULTS[$suite]}"
        time="${SUITE_TIMES[$suite]:-0}"
        
        case "$result" in
            PASSED)
                echo -e "    ${GREEN}✅${NC} $suite (${time}s)"
                ;;
            FAILED)
                echo -e "    ${RED}❌${NC} $suite (${time}s)"
                ;;
            ANALYZED)
                echo -e "    ${CYAN}📊${NC} $suite (${time}s)"
                ;;
            *)
                echo -e "    ${YELLOW}⚠️${NC} $suite (${time}s)"
                ;;
        esac
    fi
done

# Update markdown report
if [[ $GENERATE_REPORT -eq 1 ]]; then
    cat >> "$REPORT_FILE" << EOF

### Overall Results
- **Total Suites:** $TOTAL_SUITES
- **Passed:** $PASSED_SUITES
- **Failed:** $FAILED_SUITES
- **Duration:** ${TOTAL_TIME}s

### Suite Results

| Suite | Status | Duration |
|-------|--------|----------|
EOF
    
    for suite in basic functional negative workflows performance coverage; do
        if [[ -n "${SUITE_RESULTS[$suite]}" ]]; then
            echo "| $suite | ${SUITE_RESULTS[$suite]} | ${SUITE_TIMES[$suite]:-0}s |" >> "$REPORT_FILE"
        fi
    done
    
    close_reports
    
    echo ""
    print_success "Test reports generated:"
    echo "  📄 Markdown: $REPORT_FILE"
    echo "  📊 JUnit XML: $JUNIT_FILE"
fi

# ===========================
# Exit Status
# ===========================
echo ""
if [[ $FAILED_SUITES -eq 0 ]]; then
    print_success "All test suites passed! 🎉"
    exit 0
else
    print_error "Some test suites failed. Review the results above."
    exit 1
fi